// Generated by CoffeeScript 2.7.0
import {
  Enum
} from '../src/enum.js';

describe('Enum', () => {
  describe('constructor', () => {
    describe('accepts', () => {
      var table;
      table = [
        [
          'object, arr, options',
          [
            {
              a: 0
            },
            ['b'],
            {}
          ]
        ],
        [
          'object, options',
          [
            {
              a: 0,
              b: 1
            },
            {}
          ]
        ],
        ['arr, options',
        [['a',
        'b'],
        {}]],
        [
          'object, arr',
          [
            {
              a: 0
            },
            ['b']
          ]
        ],
        [
          'object',
          [
            {
              a: 0,
              b: 1
            }
          ]
        ],
        ['arr',
        [['a',
        'b']]]
      ];
      return table.forEach((arr) => {
        var args, s;
        s = arr[0];
        args = arr[1];
        return it(s, () => {
          var e;
          e = new Enum(...args);
          expect(e).toBeInstanceOf(Enum);
          expect(e.key).toEqual({
            a: 0,
            b: 1
          });
          return expect(e.value).toEqual({
            0: 'a',
            1: 'b'
          });
        });
      });
    });
    describe('options', () => {
      it('index', () => {
        var arr, e, i;
        i = 3;
        arr = ['a', 'b'];
        e = new Enum(['a', 'b'], {
          i: i
        });
        expect(e.i).toBe(i + arr.length);
        expect(e.key).toEqual({
          a: 3,
          b: 4
        });
        return expect(e.value).toEqual({
          3: 'a',
          4: 'b'
        });
      });
      return it('next', () => {
        var arr, e, i, multiplier, next;
        i = 3;
        multiplier = 3;
        next = function() {
          return this.i += multiplier;
        };
        arr = ['a', 'b'];
        e = new Enum(['a', 'b'], {
          i: i,
          next: next
        });
        expect(e.i).toBe(i + arr.length * multiplier);
        expect(e.key).toEqual({
          a: 3,
          b: 6
        });
        return expect(e.value).toEqual({
          3: 'a',
          6: 'b'
        });
      });
    });
    return describe('throws', () => {
      it('if value repeats in pairs', () => {
        var t;
        t = () => {
          return new Enum({
            a: 0,
            b: 0
          });
        };
        return expect(t).toThrow(TypeError);
      });
      it('if value in pairs not a number', () => {
        var t;
        t = () => {
          return new Enum({
            a: '0'
          });
        };
        return expect(t).toThrow(TypeError);
      });
      it('if name not a string in names list', () => {
        var t;
        t = () => {
          return new Enum([0]);
        };
        return expect(t).toThrow(TypeError);
      });
      return it('if name repeats in names list', () => {
        var t;
        t = () => {
          return new Enum(['a', 'a']);
        };
        return expect(t).toThrow(TypeError);
      });
    });
  });
  return describe('methods', () => {
    describe('dynamic', () => {
      it('forKeys()', () => {
        var e, keys;
        e = new Enum({
          a: 0
        }, ['b']);
        keys = [];
        e.forKeys(function(key) {
          return keys.push(key);
        });
        return expect(keys).toEqual(['a', 'b']);
      });
      it('forValues()', () => {
        var e, values;
        e = new Enum({
          a: 0
        }, ['b']);
        values = [];
        e.forValues(function(value) {
          return values.push(value);
        });
        return expect(values).toEqual([0, 1]);
      });
      it('forEach()', () => {
        var e, pairs;
        e = new Enum({
          a: 0
        }, ['b']);
        pairs = [];
        e.forEach(function(key, value) {
          return pairs.push([key, value]);
        });
        return expect(pairs).toEqual([['a', 0], ['b', 1]]);
      });
      it('keys()', () => {
        var e, keys;
        e = new Enum({
          a: 0
        }, ['b']);
        keys = e.keys();
        return expect(keys).toEqual(['a', 'b']);
      });
      it('values()', () => {
        var e, values;
        e = new Enum({
          a: 0
        }, ['b']);
        values = e.values();
        return expect(values).toEqual([0, 1]);
      });
      it('hasKey()', () => {
        var e;
        e = new Enum({
          a: 0
        }, ['b']);
        expect(e.hasKey('a')).toEqual(true);
        return expect(e.hasKey('b')).toEqual(true);
      });
      return it('hasValue()', () => {
        var e;
        e = new Enum({
          a: 0
        }, ['b']);
        expect(e.hasValue(0)).toEqual(true);
        return expect(e.hasValue(1)).toEqual(true);
      });
    });
    return describe('static', () => {
      describe('new()', () => {
        it('object, array', () => {
          var e;
          Enum.i = 0;
          e = Enum.new({
            a: 0
          }, ['b']);
          expect(e).toBeInstanceOf(Enum);
          expect(e.i).toBe(2);
          expect(Enum.i).toBe(2);
          expect(e.key).toEqual({
            a: 0,
            b: 1
          });
          return expect(e.value).toEqual({
            0: 'a',
            1: 'b'
          });
        });
        it('array, global i', () => {
          var e1, e2;
          Enum.i = 0;
          e1 = Enum.new(['a', 'b']);
          e2 = Enum.new(['c', 'd']);
          expect(e1).toBeInstanceOf(Enum);
          expect(e2).toBeInstanceOf(Enum);
          expect(e1.i).toBe(2);
          expect(e2.i).toBe(4);
          expect(Enum.i).toBe(4);
          expect(e1.key).toEqual({
            a: 0,
            b: 1
          });
          expect(e2.key).toEqual({
            c: 2,
            d: 3
          });
          expect(e1.value).toEqual({
            0: 'a',
            1: 'b'
          });
          return expect(e2.value).toEqual({
            2: 'c',
            3: 'd'
          });
        });
        it('counter inheritance', () => {
          var FooEnum, e1, e2;
          Enum.i = 123;
          FooEnum = (function() {
            class FooEnum extends Enum {};

            FooEnum.i = 0;

            return FooEnum;

          }).call(this);
          e1 = FooEnum.new(['a', 'b']);
          e2 = FooEnum.new(['c', 'd']);
          expect(e1).toBeInstanceOf(FooEnum);
          expect(e2).toBeInstanceOf(FooEnum);
          expect(e1.i).toBe(2);
          expect(e2.i).toBe(4);
          expect(Enum.i).toBe(123);
          expect(FooEnum.i).toBe(4);
          expect(e1.key).toEqual({
            a: 0,
            b: 1
          });
          expect(e2.key).toEqual({
            c: 2,
            d: 3
          });
          expect(e1.value).toEqual({
            0: 'a',
            1: 'b'
          });
          return expect(e2.value).toEqual({
            2: 'c',
            3: 'd'
          });
        });
        return it('options -> i', () => {
          var e1, e2;
          Enum.i = 0;
          e1 = Enum.new(['a', 'b'], {
            i: 3
          });
          e2 = Enum.new(['c', 'd']);
          expect(e1).toBeInstanceOf(Enum);
          expect(e2).toBeInstanceOf(Enum);
          expect(e1.i).toBe(5);
          expect(e2.i).toBe(7);
          expect(Enum.i).toBe(7);
          expect(e1.key).toEqual({
            a: 3,
            b: 4
          });
          expect(e2.key).toEqual({
            c: 5,
            d: 6
          });
          expect(e1.value).toEqual({
            3: 'a',
            4: 'b'
          });
          return expect(e2.value).toEqual({
            5: 'c',
            6: 'd'
          });
        });
      });
      it('raw()', () => {
        var e;
        e = Enum.raw({
          a: 0
        }, ['b']);
        return expect(e).toEqual({
          a: 0,
          b: 1,
          0: 'a',
          1: 'b',
          [Enum.index]: 2
        });
      });
      return it('fromRaw()', () => {
        var e, r;
        r = Enum.raw({
          a: 0
        }, ['b']);
        e = Enum.fromRaw(r);
        expect(e).toBeInstanceOf(Enum);
        expect(e.i).toBe(1);
        expect(e.key).toEqual({
          a: 0,
          b: 1
        });
        return expect(e.value).toEqual({
          0: 'a',
          1: 'b'
        });
      });
    });
  });
});

//# sourceMappingURL=data:application/json;base64,
